stages:
  - setup
  - build
  - test
  - scan

variables:
  # Set Python version to be used for testing
  PYTHON_VERSION: "3.9"
  SONAR_SCANNER_VERSION: 5.0.1.3006
  GIT_STRATEGY: clone  # Ensure full clone is used in all jobs
  GIT_DEPTH: 0  # Disable shallow clone for all jobs

before_script:
  - apk add --no-cache python3 py3-pip # Install necessary packages for Alpine Linux
  - python3 -m venv py3
  - source py3/bin/activate
  - pip install --no-cache-dir -r requirements.txt

setup:
  stage: setup
  tags:
    - linux
  script:
    - echo "Setting up the environment..."

test:
  stage: test
  tags:
    - linux
  image: python:3.9
  before_script:
    - pip install --upgrade pip setuptools wheel
    - pip install -r requirements.txt
    - pip install coverage
  script:
    - echo "Running unit tests..."
    - python -m unittest check_all_schedules_test.py
    # Generate coverage report for Sonar
    - coverage run check_all_schedules_test.py
    - coverage report
    - coverage xml -o coverage.xml
  artifacts:
    paths:
      - coverage.xml

scan:
  image: docker.ellisbs.co.uk:5190/ubuntu:24.04
  stage: scan
  tags:
    - linux
  script:
    - pushd ~
    - curl -o /tmp/sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${SONAR_SCANNER_VERSION}.zip
    - unzip -n /tmp/sonar-scanner.zip
    - popd
    - ~/sonar-scanner-${SONAR_SCANNER_VERSION}/bin/sonar-scanner -Dsonar.token=$SONAR_TOKEN
  dependencies:
    - test

build:
  stage: build
  tags:
    - linux
  script:
    - echo "Docker login ..."
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin docker.ellisbs.co.uk:7070 
    - echo "Building the Docker image..."
    - TIMESTAMP=$(date +'%Y.%m.%d.%H.%M')
    - docker build --push -t docker.ellisbs.co.uk:7070/check_all_schedules:$TIMESTAMP .
